
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A4_104232327_Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return A4_104232327_Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public A4_104232327_Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A4_104232327_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A4_104232327_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\011" +
    "\000\002\004\011\000\002\004\007\000\002\005\021\000" +
    "\002\006\007\000\002\006\010\000\002\006\010\000\002" +
    "\006\007\000\002\006\011\000\002\006\010\000\002\007" +
    "\005\000\002\007\003\000\002\010\004\000\002\010\003" +
    "\000\002\011\005\000\002\012\004\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\013" +
    "\005\000\002\013\006\000\002\013\004\000\002\013\004" +
    "\000\002\013\005\000\002\014\006\000\002\014\007\000" +
    "\002\015\005\000\002\022\011\000\002\022\015\000\002" +
    "\016\003\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\017\003\000\002\020\006\000\002\020\005" +
    "\000\002\020\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\005\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\006\005\007\006\010\001\002\000\010\002" +
    "\uffff\005\007\006\010\001\002\000\004\002\200\001\002" +
    "\000\006\010\012\024\011\001\002\000\012\010\ufffd\014" +
    "\ufffd\016\ufffd\024\ufffd\001\002\000\012\010\ufffe\014\ufffe" +
    "\016\ufffe\024\ufffe\001\002\000\004\015\172\001\002\000" +
    "\006\015\014\024\013\001\002\000\004\015\164\001\002" +
    "\000\010\005\007\006\010\016\017\001\002\000\010\014" +
    "\uffef\016\uffef\024\163\001\002\000\004\016\161\001\002" +
    "\000\004\017\023\001\002\000\006\014\021\016\ufff1\001" +
    "\002\000\006\005\007\006\010\001\002\000\004\016\ufff2" +
    "\001\002\000\022\005\007\006\010\007\041\017\023\022" +
    "\025\024\036\033\034\034\027\001\002\000\010\002\ufff8" +
    "\005\ufff8\006\ufff8\001\002\000\004\015\145\001\002\000" +
    "\024\005\uffe9\006\uffe9\007\uffe9\017\uffe9\020\uffe9\022\uffe9" +
    "\024\uffe9\033\uffe9\034\uffe9\001\002\000\004\015\127\001" +
    "\002\000\024\005\uffe6\006\uffe6\007\uffe6\017\uffe6\020\uffe6" +
    "\022\uffe6\024\uffe6\033\uffe6\034\uffe6\001\002\000\024\005" +
    "\uffe8\006\uffe8\007\uffe8\017\uffe8\020\uffe8\022\uffe8\024\uffe8" +
    "\033\uffe8\034\uffe8\001\002\000\024\005\uffec\006\uffec\007" +
    "\uffec\017\uffec\020\uffec\022\uffec\024\uffec\033\uffec\034\uffec" +
    "\001\002\000\024\005\uffeb\006\uffeb\007\uffeb\017\uffeb\020" +
    "\uffeb\022\uffeb\024\uffeb\033\uffeb\034\uffeb\001\002\000\004" +
    "\015\113\001\002\000\024\005\uffea\006\uffea\007\uffea\017" +
    "\uffea\020\uffea\022\uffea\024\uffea\033\uffea\034\uffea\001\002" +
    "\000\010\013\107\014\106\021\075\001\002\000\024\005" +
    "\007\006\010\007\041\017\023\020\112\022\025\024\036" +
    "\033\034\034\027\001\002\000\004\024\072\001\002\000" +
    "\012\004\050\015\047\024\044\025\043\001\002\000\024" +
    "\005\uffe7\006\uffe7\007\uffe7\017\uffe7\020\uffe7\022\uffe7\024" +
    "\uffe7\033\uffe7\034\uffe7\001\002\000\016\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\016\uffd3\030\uffd3\001\002\000\020\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\063\016\uffd1\030\uffd1" +
    "\001\002\000\016\011\056\012\057\013\uffdb\014\uffdb\016" +
    "\uffdb\030\055\001\002\000\016\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\016\uffd7\030\uffd7\001\002\000\012\004\050\015" +
    "\047\024\044\025\043\001\002\000\016\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\016\uffd2\030\uffd2\001\002\000\004\013" +
    "\052\001\002\000\024\005\uffde\006\uffde\007\uffde\017\uffde" +
    "\020\uffde\022\uffde\024\uffde\033\uffde\034\uffde\001\002\000" +
    "\004\016\054\001\002\000\016\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\016\uffd5\030\uffd5\001\002\000\012\004\050\015" +
    "\047\024\044\025\043\001\002\000\012\004\050\015\047" +
    "\024\044\025\043\001\002\000\012\004\050\015\047\024" +
    "\044\025\043\001\002\000\010\013\uffd8\014\uffd8\016\uffd8" +
    "\001\002\000\010\013\uffd9\014\uffd9\016\uffd9\001\002\000" +
    "\010\013\uffda\014\uffda\016\uffda\001\002\000\014\004\050" +
    "\015\047\016\065\024\044\025\043\001\002\000\006\014" +
    "\070\016\uffcf\001\002\000\016\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\016\uffd4\030\uffd4\001\002\000\004\016\067\001" +
    "\002\000\016\011\uffd6\012\uffd6\013\uffd6\014\uffd6\016\uffd6" +
    "\030\uffd6\001\002\000\012\004\050\015\047\024\044\025" +
    "\043\001\002\000\004\016\uffd0\001\002\000\010\013\076" +
    "\014\074\021\075\001\002\000\024\005\uffe3\006\uffe3\007" +
    "\uffe3\017\uffe3\020\uffe3\022\uffe3\024\uffe3\033\uffe3\034\uffe3" +
    "\001\002\000\010\005\007\006\010\024\104\001\002\000" +
    "\012\004\050\015\047\024\044\025\043\001\002\000\024" +
    "\005\uffe5\006\uffe5\007\uffe5\017\uffe5\020\uffe5\022\uffe5\024" +
    "\uffe5\033\uffe5\034\uffe5\001\002\000\006\013\101\014\100" +
    "\001\002\000\004\024\102\001\002\000\024\005\uffe0\006" +
    "\uffe0\007\uffe0\017\uffe0\020\uffe0\022\uffe0\024\uffe0\033\uffe0" +
    "\034\uffe0\001\002\000\004\021\075\001\002\000\024\005" +
    "\uffdf\006\uffdf\007\uffdf\017\uffdf\020\uffdf\022\uffdf\024\uffdf" +
    "\033\uffdf\034\uffdf\001\002\000\006\013\107\014\106\001" +
    "\002\000\024\005\uffe4\006\uffe4\007\uffe4\017\uffe4\020\uffe4" +
    "\022\uffe4\024\uffe4\033\uffe4\034\uffe4\001\002\000\010\005" +
    "\007\006\010\024\104\001\002\000\024\005\uffe2\006\uffe2" +
    "\007\uffe2\017\uffe2\020\uffe2\022\uffe2\024\uffe2\033\uffe2\034" +
    "\uffe2\001\002\000\024\005\uffe1\006\uffe1\007\uffe1\017\uffe1" +
    "\020\uffe1\022\uffe1\024\uffe1\033\uffe1\034\uffe1\001\002\000" +
    "\024\005\007\006\010\007\041\017\023\020\uffed\022\025" +
    "\024\036\033\034\034\027\001\002\000\026\002\uffee\005" +
    "\uffee\006\uffee\007\uffee\017\uffee\020\uffee\022\uffee\024\uffee" +
    "\033\uffee\034\uffee\001\002\000\004\024\114\001\002\000" +
    "\010\016\117\031\116\032\115\001\002\000\004\024\124" +
    "\001\002\000\004\024\121\001\002\000\004\017\023\001" +
    "\002\000\024\005\ufffa\006\ufffa\007\ufffa\017\ufffa\020\ufffa" +
    "\022\ufffa\024\ufffa\033\ufffa\034\ufffa\001\002\000\004\016" +
    "\122\001\002\000\004\017\023\001\002\000\024\005\ufffb" +
    "\006\ufffb\007\ufffb\017\ufffb\020\ufffb\022\ufffb\024\ufffb\033" +
    "\ufffb\034\ufffb\001\002\000\004\016\125\001\002\000\004" +
    "\017\023\001\002\000\024\005\ufffc\006\ufffc\007\ufffc\017" +
    "\ufffc\020\ufffc\022\ufffc\024\ufffc\033\ufffc\034\ufffc\001\002" +
    "\000\004\024\130\001\002\000\004\021\131\001\002\000" +
    "\004\004\132\001\002\000\004\013\133\001\002\000\004" +
    "\024\134\001\002\000\004\031\135\001\002\000\004\004" +
    "\136\001\002\000\004\013\137\001\002\000\004\024\140" +
    "\001\002\000\004\011\141\001\002\000\004\011\142\001" +
    "\002\000\004\016\143\001\002\000\022\005\007\006\010" +
    "\007\041\017\023\022\025\024\036\033\034\034\027\001" +
    "\002\000\024\005\007\006\010\007\041\017\023\020\ufff9" +
    "\022\025\024\036\033\034\034\027\001\002\000\004\025" +
    "\146\001\002\000\004\014\147\001\002\000\004\024\150" +
    "\001\002\000\006\014\151\016\152\001\002\000\004\024" +
    "\154\001\002\000\004\013\153\001\002\000\024\005\uffdd" +
    "\006\uffdd\007\uffdd\017\uffdd\020\uffdd\022\uffdd\024\uffdd\033" +
    "\uffdd\034\uffdd\001\002\000\004\030\155\001\002\000\004" +
    "\024\156\001\002\000\004\016\157\001\002\000\004\013" +
    "\160\001\002\000\024\005\uffdc\006\uffdc\007\uffdc\017\uffdc" +
    "\020\uffdc\022\uffdc\024\uffdc\033\uffdc\034\uffdc\001\002\000" +
    "\004\017\023\001\002\000\010\002\ufff7\005\ufff7\006\ufff7" +
    "\001\002\000\006\014\ufff0\016\ufff0\001\002\000\010\005" +
    "\007\006\010\016\166\001\002\000\004\016\170\001\002" +
    "\000\004\017\023\001\002\000\010\002\ufff6\005\ufff6\006" +
    "\ufff6\001\002\000\004\017\023\001\002\000\010\002\ufff4" +
    "\005\ufff4\006\ufff4\001\002\000\010\005\007\006\010\016" +
    "\174\001\002\000\004\016\176\001\002\000\004\017\023" +
    "\001\002\000\010\002\ufff5\005\ufff5\006\ufff5\001\002\000" +
    "\004\017\023\001\002\000\010\002\ufff3\005\ufff3\006\ufff3" +
    "\001\002\000\004\002\000\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\010\002\004\003\005\006\003\001\001\000" +
    "\010\002\200\003\005\006\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\014\007\015\010\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\023\001\001\000\002\001\001" +
    "\000\010\003\014\007\021\010\017\001\001\000\002\001" +
    "\001\000\024\003\037\004\041\005\027\011\031\012\036" +
    "\013\032\014\034\015\025\022\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\037\004\041\005\027\011\031\012" +
    "\110\013\032\014\034\015\025\022\030\001\001\000\004" +
    "\014\072\001\001\000\010\016\050\017\044\020\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\052\017" +
    "\044\020\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\061\017\044\020\045\001\001\000\010\016\060" +
    "\017\044\020\045\001\001\000\010\016\057\017\044\020" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\063\017\044\020\045\021\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\063\017\044\020\045\021" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\037\013\104\001\001\000\010\016" +
    "\076\017\044\020\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\037\013\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\037\004\041\005\027" +
    "\011\031\012\110\013\032\014\034\015\025\022\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\037\004\041\005\027\011\031" +
    "\012\143\013\032\014\034\015\025\022\030\001\001\000" +
    "\024\003\037\004\041\005\027\011\031\012\110\013\032" +
    "\014\034\015\025\022\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\014\007\164\010\017" +
    "\001\001\000\002\001\001\000\004\011\166\001\001\000" +
    "\002\001\001\000\004\011\170\001\001\000\002\001\001" +
    "\000\010\003\014\007\172\010\017\001\001\000\002\001" +
    "\001\000\004\011\174\001\001\000\002\001\001\000\004" +
    "\011\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A4_104232327_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A4_104232327_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A4_104232327_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A4_104232327_Parser$actions {
  private final A4_104232327_Parser parser;

  /** Constructor */
  CUP$A4_104232327_Parser$actions(A4_104232327_Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A4_104232327_Parser$do_action_part00000000(
    int                        CUP$A4_104232327_Parser$act_num,
    java_cup.runtime.lr_parser CUP$A4_104232327_Parser$parser,
    java.util.Stack            CUP$A4_104232327_Parser$stack,
    int                        CUP$A4_104232327_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A4_104232327_Parser$result;

      /* select the action based on the action number */
      switch (CUP$A4_104232327_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= methodDecl program 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$A4_104232327_Parser$stack.peek()).value;
		 RESULT =e+1; 
              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-1)).value;
		RESULT = start_val;
              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A4_104232327_Parser$parser.done_parsing();
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= methodDecl 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= INT 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= VOID 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ifStmt ::= IF LPAR ID GREATER ID RPAR block 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",2, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ifStmt ::= IF LPAR ID LESS ID RPAR block 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",2, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ifStmt ::= IF LPAR ID RPAR block 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",2, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // forLoop ::= FOR LPAR ID EQUAL NUMBER SEMI ID LESS NUMBER SEMI ID PLUS PLUS RPAR statement 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("forLoop",3, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-14)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // methodDecl ::= type MAIN LPAR RPAR block 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",4, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // methodDecl ::= type MAIN LPAR formalParams RPAR block 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",4, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // methodDecl ::= type MAIN ID LPAR RPAR block 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",4, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // methodDecl ::= type ID LPAR RPAR block 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",4, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // methodDecl ::= type MAIN ID LPAR formalParams RPAR block 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",4, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // methodDecl ::= type ID LPAR formalParams RPAR block 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",4, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formalParams ::= formalParam COMMA formalParams 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("formalParams",5, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formalParams ::= formalParam 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("formalParams",5, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formalParam ::= type ID 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("formalParam",6, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formalParam ::= type 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("formalParam",6, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // block ::= LBRA statement RBRA 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("block",7, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= statement statement 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= block 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= localVarDecl 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= assignStmt 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= returnStmt 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= printStmt 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= ifStmt 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= forLoop 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // localVarDecl ::= type ID SEMI 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",9, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // localVarDecl ::= type ID COMMA localVarDecl 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",9, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // localVarDecl ::= type assignStmt 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",9, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // localVarDecl ::= ID SEMI 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",9, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // localVarDecl ::= ID COMMA localVarDecl 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",9, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // assignStmt ::= ID EQUAL expression SEMI 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("assignStmt",10, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assignStmt ::= ID EQUAL expression COMMA assignStmt 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("assignStmt",10, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // returnStmt ::= RETURN expression SEMI 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("returnStmt",11, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // printStmt ::= PRINTF LPAR QUOTES COMMA ID RPAR SEMI 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("printStmt",16, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // printStmt ::= PRINTF LPAR QUOTES COMMA ID COMMA ID MULT ID RPAR SEMI 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("printStmt",16, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-10)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= multiplicativeExpr 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= multiplicativeExpr MULT expression 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= multiplicativeExpr PLUS expression 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= multiplicativeExpr MINUS expression 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // multiplicativeExpr ::= primaryExpr 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpr",13, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // primaryExpr ::= ID LPAR actualParams RPAR 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",14, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // primaryExpr ::= LPAR expression RPAR 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",14, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // primaryExpr ::= ID LPAR RPAR 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",14, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // primaryExpr ::= QUOTES 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",14, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // primaryExpr ::= NUMBER 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",14, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // primaryExpr ::= ID 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",14, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // actualParams ::= expression COMMA actualParams 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("actualParams",15, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.elementAt(CUP$A4_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // actualParams ::= expression 
            {
              Object RESULT =null;

              CUP$A4_104232327_Parser$result = parser.getSymbolFactory().newSymbol("actualParams",15, ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104232327_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A4_104232327_Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A4_104232327_Parser$do_action(
    int                        CUP$A4_104232327_Parser$act_num,
    java_cup.runtime.lr_parser CUP$A4_104232327_Parser$parser,
    java.util.Stack            CUP$A4_104232327_Parser$stack,
    int                        CUP$A4_104232327_Parser$top)
    throws java.lang.Exception
    {
              return CUP$A4_104232327_Parser$do_action_part00000000(
                               CUP$A4_104232327_Parser$act_num,
                               CUP$A4_104232327_Parser$parser,
                               CUP$A4_104232327_Parser$stack,
                               CUP$A4_104232327_Parser$top);
    }
}

}
