
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A5_104232327_Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return A5_104232327_Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public A5_104232327_Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A5_104232327_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A5_104232327_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\023\003\000\002\002\004\000\002\026" +
    "\007\000\002\007\012\000\002\027\004\000\002\030\005" +
    "\000\002\025\007\000\002\025\011\000\002\024\007\000" +
    "\002\024\011\000\002\002\004\000\002\002\003\000\002" +
    "\003\003\000\002\003\003\000\002\004\007\000\002\004" +
    "\010\000\002\004\010\000\002\004\007\000\002\004\011" +
    "\000\002\004\010\000\002\005\005\000\002\005\003\000" +
    "\002\006\004\000\002\006\003\000\002\010\005\000\002" +
    "\012\003\000\002\012\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\004\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\013\005\000\002\013\006\000\002\013" +
    "\004\000\002\013\004\000\002\013\005\000\002\014\006" +
    "\000\002\014\007\000\002\015\005\000\002\015\003\000" +
    "\002\022\011\000\002\022\013\000\002\022\007\000\002" +
    "\016\003\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\004" +
    "\000\002\017\003\000\002\020\006\000\002\020\005\000" +
    "\002\020\005\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\011\000\002\021\005\000\002\021" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\006\005\010\006\011\001\002\000\010\002" +
    "\ufff6\005\010\006\011\001\002\000\004\002\001\001\002" +
    "\000\004\002\234\001\002\000\006\010\013\024\012\001" +
    "\002\000\012\010\ufff4\014\ufff4\016\ufff4\024\ufff4\001\002" +
    "\000\012\010\ufff5\014\ufff5\016\ufff5\024\ufff5\001\002\000" +
    "\004\015\226\001\002\000\006\015\015\024\014\001\002" +
    "\000\004\015\220\001\002\000\010\005\010\006\011\016" +
    "\020\001\002\000\010\014\uffea\016\uffea\024\217\001\002" +
    "\000\004\016\215\001\002\000\004\017\024\001\002\000" +
    "\006\014\022\016\uffec\001\002\000\006\005\010\006\011" +
    "\001\002\000\004\016\uffed\001\002\000\044\004\050\005" +
    "\010\006\011\007\033\015\064\017\024\022\040\024\042" +
    "\025\027\034\061\036\036\040\031\041\044\043\053\044" +
    "\035\045\057\046\062\001\002\000\010\002\ufff3\005\ufff3" +
    "\006\ufff3\001\002\000\046\004\050\005\010\006\011\007" +
    "\033\015\064\017\024\020\uffe8\022\040\024\042\025\027" +
    "\034\061\036\036\040\031\041\044\043\053\044\035\045" +
    "\057\046\062\001\002\000\024\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\016\uffc3\031\uffc3\032\uffc3\033\uffc3\042\uffc3\001" +
    "\002\000\004\024\207\001\002\000\004\015\203\001\002" +
    "\000\046\004\uffe2\005\uffe2\006\uffe2\007\uffe2\015\uffe2\017" +
    "\uffe2\020\uffe2\022\uffe2\024\uffe2\025\uffe2\034\uffe2\036\uffe2" +
    "\040\uffe2\041\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\001" +
    "\002\000\012\004\050\015\064\024\065\025\027\001\002" +
    "\000\024\011\172\012\173\013\uffce\014\uffce\016\uffce\031" +
    "\170\032\171\033\167\042\uffce\001\002\000\004\015\163" +
    "\001\002\000\004\015\155\001\002\000\046\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\015\uffe6\017\uffe6\020\uffe6\022\uffe6" +
    "\024\uffe6\025\uffe6\034\uffe6\036\uffe6\040\uffe6\041\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\001\002\000\004\015\141" +
    "\001\002\000\046\004\uffdc\005\uffdc\006\uffdc\007\uffdc\015" +
    "\uffdc\017\uffdc\020\uffdc\022\uffdc\024\uffdc\025\uffdc\034\uffdc" +
    "\036\uffdc\040\uffdc\041\uffdc\043\uffdc\044\uffdc\045\uffdc\046" +
    "\uffdc\001\002\000\026\011\uffc1\012\uffc1\013\uffc1\014\135" +
    "\015\070\021\115\031\uffc1\032\uffc1\033\uffc1\035\071\001" +
    "\002\000\046\004\uffe5\005\uffe5\006\uffe5\007\uffe5\015\uffe5" +
    "\017\uffe5\020\uffe5\022\uffe5\024\uffe5\025\uffe5\034\uffe5\036" +
    "\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\001\002\000\004\017\024\001\002\000\046\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\015\uffe1\017\uffe1\020\uffe1\022\uffe1" +
    "\024\uffe1\025\uffe1\034\uffe1\036\uffe1\040\uffe1\041\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\001\002\000\004\013\126" +
    "\001\002\000\046\004\uffdf\005\uffdf\006\uffdf\007\uffdf\015" +
    "\uffdf\017\uffdf\020\uffdf\022\uffdf\024\uffdf\025\uffdf\034\uffdf" +
    "\036\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\001\002\000\024\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\016\uffc2\031\uffc2\032\uffc2\033\uffc2\042\uffc2\001\002\000" +
    "\046\004\uffe3\005\uffe3\006\uffe3\007\uffe3\015\uffe3\017\uffe3" +
    "\020\uffe3\022\uffe3\024\uffe3\025\uffe3\034\uffe3\036\uffe3\040" +
    "\uffe3\041\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\001\002" +
    "\000\046\004\uffdd\005\uffdd\006\uffdd\007\uffdd\015\uffdd\017" +
    "\uffdd\020\uffdd\022\uffdd\024\uffdd\025\uffdd\034\uffdd\036\uffdd" +
    "\040\uffdd\041\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\001" +
    "\002\000\012\004\050\015\064\024\065\025\027\001\002" +
    "\000\046\004\uffe4\005\uffe4\006\uffe4\007\uffe4\015\uffe4\017" +
    "\uffe4\020\uffe4\022\uffe4\024\uffe4\025\uffe4\034\uffe4\036\uffe4" +
    "\040\uffe4\041\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\001" +
    "\002\000\024\011\uffc7\012\uffc7\013\uffc7\014\uffc7\016\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\042\uffc7\001\002\000\046\004" +
    "\uffdb\005\uffdb\006\uffdb\007\uffdb\015\uffdb\017\uffdb\020\uffdb" +
    "\022\uffdb\024\uffdb\025\uffdb\034\uffdb\036\uffdb\040\uffdb\041" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\001\002\000\004" +
    "\042\123\001\002\000\004\020\122\001\002\000\004\015" +
    "\105\001\002\000\046\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\015\uffd2\017\uffd2\020\uffd2\022\uffd2\024\uffd2\025\uffd2\034" +
    "\uffd2\036\uffd2\040\uffd2\041\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\001\002\000\046\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\015\uffe0\017\uffe0\020\uffe0\022\uffe0\024\uffe0\025\uffe0" +
    "\034\uffe0\036\uffe0\040\uffe0\041\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\001\002\000\012\004\050\015\064\024\065" +
    "\025\027\001\002\000\030\011\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\015\070\016\uffc1\031\uffc1\032\uffc1\033\uffc1\035\071" +
    "\042\uffc1\001\002\000\004\016\067\001\002\000\024\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\016\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\042\uffc5\001\002\000\014\004\050\015\064\016" +
    "\074\024\073\025\027\001\002\000\012\013\uffc8\014\uffc8" +
    "\016\uffc8\042\uffc8\001\002\000\006\014\103\016\uffbe\001" +
    "\002\000\024\011\uffc1\012\uffc1\014\uffc1\015\070\016\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\035\071\001\002\000\024\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\016\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\042\uffc4\001\002\000\004\016\076\001\002\000" +
    "\024\011\uffc6\012\uffc6\013\uffc6\014\uffc6\016\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\042\uffc6\001\002\000\004\024\100\001" +
    "\002\000\004\016\101\001\002\000\004\013\102\001\002" +
    "\000\024\011\uffc0\012\uffc0\013\uffc0\014\uffc0\016\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\042\uffc0\001\002\000\012\004\050" +
    "\015\064\024\065\025\027\001\002\000\004\016\uffbf\001" +
    "\002\000\004\024\106\001\002\000\004\021\115\001\002" +
    "\000\012\004\050\015\064\024\065\025\027\001\002\000" +
    "\004\013\111\001\002\000\012\004\050\015\064\024\065" +
    "\025\027\001\002\000\004\016\113\001\002\000\044\004" +
    "\050\005\010\006\011\007\033\015\064\017\024\022\040" +
    "\024\042\025\027\034\061\036\036\040\031\041\044\043" +
    "\053\044\035\045\057\046\062\001\002\000\046\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\015\ufffe\017\ufffe\020\ufffe\022" +
    "\ufffe\024\ufffe\025\ufffe\034\ufffe\036\ufffe\040\ufffe\041\ufffe" +
    "\043\ufffe\044\ufffe\045\ufffe\046\ufffe\001\002\000\012\004" +
    "\050\015\064\024\065\025\027\001\002\000\006\013\120" +
    "\014\117\001\002\000\004\024\106\001\002\000\046\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\015\uffd5\017\uffd5\020\uffd5" +
    "\022\uffd5\024\uffd5\025\uffd5\034\uffd5\036\uffd5\040\uffd5\041" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\001\002\000\046" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\015\uffd4\017\uffd4\020" +
    "\uffd4\022\uffd4\024\uffd4\025\uffd4\034\uffd4\036\uffd4\040\uffd4" +
    "\041\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\001\002\000" +
    "\052\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\015\uffe9" +
    "\017\uffe9\020\uffe9\022\uffe9\024\uffe9\025\uffe9\034\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\043\uffe9\044\uffe9\045\uffe9" +
    "\046\uffe9\001\002\000\046\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\015\ufffd\017\ufffd\020\ufffd\022\ufffd\024\ufffd\025\ufffd" +
    "\034\ufffd\036\ufffd\040\ufffd\041\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\001\002\000\004\042\125\001\002\000\046" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\015\ufffc\017\ufffc\020" +
    "\ufffc\022\ufffc\024\ufffc\025\ufffc\034\ufffc\036\ufffc\040\ufffc" +
    "\041\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\001\002\000" +
    "\046\004\uffde\005\uffde\006\uffde\007\uffde\015\uffde\017\uffde" +
    "\020\uffde\022\uffde\024\uffde\025\uffde\034\uffde\036\uffde\040" +
    "\uffde\041\uffde\043\uffde\044\uffde\045\uffde\046\uffde\001\002" +
    "\000\004\040\130\001\002\000\004\015\131\001\002\000" +
    "\012\004\050\015\064\024\065\025\027\001\002\000\004" +
    "\016\133\001\002\000\004\013\134\001\002\000\046\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\015\ufffa\017\ufffa\020\ufffa" +
    "\022\ufffa\024\ufffa\025\ufffa\034\ufffa\036\ufffa\040\ufffa\041" +
    "\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\001\002\000\010" +
    "\005\010\006\011\024\137\001\002\000\046\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\015\uffd7\017\uffd7\020\uffd7\022\uffd7" +
    "\024\uffd7\025\uffd7\034\uffd7\036\uffd7\040\uffd7\041\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\046\uffd7\001\002\000\006\013\136" +
    "\014\135\001\002\000\046\004\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\015\uffd6\017\uffd6\020\uffd6\022\uffd6\024\uffd6\025\uffd6" +
    "\034\uffd6\036\uffd6\040\uffd6\041\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\001\002\000\004\025\142\001\002\000\006" +
    "\014\143\016\144\001\002\000\012\004\050\015\064\024" +
    "\065\025\027\001\002\000\004\013\145\001\002\000\046" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\015\uffcf\017\uffcf\020" +
    "\uffcf\022\uffcf\024\uffcf\025\uffcf\034\uffcf\036\uffcf\040\uffcf" +
    "\041\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\001\002\000" +
    "\006\014\147\016\150\001\002\000\012\004\050\015\064" +
    "\024\065\025\027\001\002\000\004\013\151\001\002\000" +
    "\046\004\uffd1\005\uffd1\006\uffd1\007\uffd1\015\uffd1\017\uffd1" +
    "\020\uffd1\022\uffd1\024\uffd1\025\uffd1\034\uffd1\036\uffd1\040" +
    "\uffd1\041\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\001\002" +
    "\000\004\016\153\001\002\000\004\013\154\001\002\000" +
    "\046\004\uffd0\005\uffd0\006\uffd0\007\uffd0\015\uffd0\017\uffd0" +
    "\020\uffd0\022\uffd0\024\uffd0\025\uffd0\034\uffd0\036\uffd0\040" +
    "\uffd0\041\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\001\002" +
    "\000\012\004\050\015\064\024\065\025\027\001\002\000" +
    "\004\016\157\001\002\000\004\017\024\001\002\000\050" +
    "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\015\ufff9\017\ufff9\020" +
    "\ufff9\022\ufff9\024\ufff9\025\ufff9\034\ufff9\036\ufff9\037\161" +
    "\040\ufff9\041\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\001" +
    "\002\000\004\017\024\001\002\000\046\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\015\ufff8\017\ufff8\020\ufff8\022\ufff8\024" +
    "\ufff8\025\ufff8\034\ufff8\036\ufff8\040\ufff8\041\ufff8\043\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\001\002\000\012\004\050\015" +
    "\064\024\065\025\027\001\002\000\004\016\165\001\002" +
    "\000\004\017\024\001\002\000\046\004\uffff\005\uffff\006" +
    "\uffff\007\uffff\015\uffff\017\uffff\020\uffff\022\uffff\024\uffff" +
    "\025\uffff\034\uffff\036\uffff\040\uffff\041\uffff\043\uffff\044" +
    "\uffff\045\uffff\046\uffff\001\002\000\012\004\050\015\064" +
    "\024\065\025\027\001\002\000\012\004\050\015\064\024" +
    "\065\025\027\001\002\000\012\004\050\015\064\024\065" +
    "\025\027\001\002\000\012\004\050\015\064\024\065\025" +
    "\027\001\002\000\012\004\050\015\064\024\065\025\027" +
    "\001\002\000\012\013\uffcb\014\uffcb\016\uffcb\042\uffcb\001" +
    "\002\000\012\013\uffcc\014\uffcc\016\uffcc\042\uffcc\001\002" +
    "\000\012\013\uffc9\014\uffc9\016\uffc9\042\uffc9\001\002\000" +
    "\012\013\uffcd\014\uffcd\016\uffcd\042\uffcd\001\002\000\012" +
    "\013\uffca\014\uffca\016\uffca\042\uffca\001\002\000\004\013" +
    "\202\001\002\000\046\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\015\uffd3\017\uffd3\020\uffd3\022\uffd3\024\uffd3\025\uffd3\034" +
    "\uffd3\036\uffd3\040\uffd3\041\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\001\002\000\012\004\050\015\064\024\065\025" +
    "\027\001\002\000\004\016\205\001\002\000\004\017\024" +
    "\001\002\000\046\004\ufffb\005\ufffb\006\ufffb\007\ufffb\015" +
    "\ufffb\017\ufffb\020\ufffb\022\ufffb\024\ufffb\025\ufffb\034\ufffb" +
    "\036\ufffb\040\ufffb\041\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\001\002\000\010\013\212\014\211\021\115\001\002" +
    "\000\046\004\uffd8\005\uffd8\006\uffd8\007\uffd8\015\uffd8\017" +
    "\uffd8\020\uffd8\022\uffd8\024\uffd8\025\uffd8\034\uffd8\036\uffd8" +
    "\040\uffd8\041\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\001" +
    "\002\000\010\005\010\006\011\024\137\001\002\000\046" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\015\uffda\017\uffda\020" +
    "\uffda\022\uffda\024\uffda\025\uffda\034\uffda\036\uffda\040\uffda" +
    "\041\uffda\043\uffda\044\uffda\045\uffda\046\uffda\001\002\000" +
    "\046\004\uffd9\005\uffd9\006\uffd9\007\uffd9\015\uffd9\017\uffd9" +
    "\020\uffd9\022\uffd9\024\uffd9\025\uffd9\034\uffd9\036\uffd9\040" +
    "\uffd9\041\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\001\002" +
    "\000\004\020\uffe7\001\002\000\004\017\024\001\002\000" +
    "\010\002\ufff2\005\ufff2\006\ufff2\001\002\000\006\014\uffeb" +
    "\016\uffeb\001\002\000\010\005\010\006\011\016\222\001" +
    "\002\000\004\016\224\001\002\000\004\017\024\001\002" +
    "\000\010\002\ufff1\005\ufff1\006\ufff1\001\002\000\004\017" +
    "\024\001\002\000\010\002\uffef\005\uffef\006\uffef\001\002" +
    "\000\010\005\010\006\011\016\230\001\002\000\004\016" +
    "\232\001\002\000\004\017\024\001\002\000\010\002\ufff0" +
    "\005\ufff0\006\ufff0\001\002\000\004\017\024\001\002\000" +
    "\010\002\uffee\005\uffee\006\uffee\001\002\000\004\002\000" +
    "\001\002\000\004\002\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\012\002\004\003\006\004\003\023\005\001" +
    "\001\000\010\002\234\003\006\004\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\015\005\016\006\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\024" +
    "\001\001\000\002\001\001\000\010\003\015\005\022\006" +
    "\020\001\001\000\002\001\001\000\044\003\027\007\044" +
    "\010\036\011\025\012\057\013\042\014\053\015\050\016" +
    "\045\017\033\020\054\022\031\024\062\025\046\026\051" +
    "\027\055\030\040\001\001\000\002\001\001\000\044\003" +
    "\027\007\044\010\036\011\025\012\213\013\042\014\053" +
    "\015\050\016\045\017\033\020\054\022\031\024\062\025" +
    "\046\026\051\027\055\030\040\001\001\000\002\001\001" +
    "\000\004\014\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\200\017\033\020\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\123\017" +
    "\033\020\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\065\017\033\020\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\071\017\033" +
    "\020\054\021\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\071\017\033" +
    "\020\054\021\103\001\001\000\002\001\001\000\004\014" +
    "\106\001\001\000\002\001\001\000\010\016\107\017\033" +
    "\020\054\001\001\000\002\001\001\000\010\016\111\017" +
    "\033\020\054\001\001\000\002\001\001\000\042\003\027" +
    "\007\044\010\036\011\113\013\042\014\053\015\050\016" +
    "\045\017\033\020\054\022\031\024\062\025\046\026\051" +
    "\027\055\030\040\001\001\000\002\001\001\000\010\016" +
    "\115\017\033\020\054\001\001\000\002\001\001\000\004" +
    "\014\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\131\017\033\020\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\027\013\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\145\017\033\020\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\151\017" +
    "\033\020\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\155\017\033\020\054\001\001\000\002\001\001" +
    "\000\004\010\157\001\001\000\002\001\001\000\004\010" +
    "\161\001\001\000\002\001\001\000\010\016\163\017\033" +
    "\020\054\001\001\000\002\001\001\000\004\010\165\001" +
    "\001\000\002\001\001\000\010\016\177\017\033\020\054" +
    "\001\001\000\010\016\176\017\033\020\054\001\001\000" +
    "\010\016\175\017\033\020\054\001\001\000\010\016\174" +
    "\017\033\020\054\001\001\000\010\016\173\017\033\020" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\203\017\033\020\054" +
    "\001\001\000\002\001\001\000\004\010\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\027\013\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\015\005\220\006" +
    "\020\001\001\000\002\001\001\000\004\010\222\001\001" +
    "\000\002\001\001\000\004\010\224\001\001\000\002\001" +
    "\001\000\010\003\015\005\226\006\020\001\001\000\002" +
    "\001\001\000\004\010\230\001\001\000\002\001\001\000" +
    "\004\010\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A5_104232327_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A5_104232327_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A5_104232327_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A5_104232327_Parser$actions {
  private final A5_104232327_Parser parser;

  /** Constructor */
  CUP$A5_104232327_Parser$actions(A5_104232327_Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A5_104232327_Parser$do_action_part00000000(
    int                        CUP$A5_104232327_Parser$act_num,
    java_cup.runtime.lr_parser CUP$A5_104232327_Parser$parser,
    java.util.Stack            CUP$A5_104232327_Parser$stack,
    int                        CUP$A5_104232327_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A5_104232327_Parser$result;

      /* select the action based on the action number */
      switch (CUP$A5_104232327_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // full ::= program 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT = ("public class A5_output {\n"+e+"\n}"); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("full",17, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= full EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).value;
		RESULT = start_val;
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A5_104232327_Parser$parser.done_parsing();
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // switchStmt ::= SWITCH LPAR expression RPAR block 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT=("switch("+e+")"+b);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("switchStmt",20, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // forLoop ::= FOR LPAR assignStmt expression SEMI expression RPAR statement 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT=("for ("+a+e+";"+h+")\n"+s);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("forLoop",5, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-7)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // default ::= DEFAULT COLON 
            {
              String RESULT =null;
		 RESULT= ("default: "); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("default",21, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // case ::= CASE expression COLON 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).value;
		 RESULT= ("case "+e+":"); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("case",22, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // whileLoop ::= WHILE LPAR expression RPAR block 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT=("while ("+e+")"+b);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("whileLoop",19, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // whileLoop ::= DO block WHILE LPAR expression RPAR SEMI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		 RESULT=("do"+b+"while("+e+");");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("whileLoop",19, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ifStmt ::= IF LPAR expression RPAR block 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= ("if("+e+")"+b);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",18, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ifStmt ::= IF LPAR expression RPAR block ELSE block 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= ("if("+e+")"+b+"else"+bl);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",18, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program ::= methodDecl program 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= e+ "\n" + e2;
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program ::= methodDecl 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= e;
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= INT 
            {
              String RESULT =null;
		 RESULT= ("int "); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= VOID 
            {
              String RESULT =null;

              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // methodDecl ::= type MAIN LPAR RPAR block 
            {
              String RESULT =null;

              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // methodDecl ::= type MAIN LPAR formalParams RPAR block 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= ("\tpublic static void main(String [] args)\n" + b); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methodDecl ::= type MAIN ID LPAR RPAR block 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= ("public static void main(String [] args)\n" + b); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // methodDecl ::= type ID LPAR RPAR block 
            {
              String RESULT =null;

              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // methodDecl ::= type MAIN ID LPAR formalParams RPAR block 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= ("public static void main(String [] args)\n" + b); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // methodDecl ::= type ID LPAR formalParams RPAR block 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= ("static "+t+" "+i+"("+fp+")\n" + b); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formalParams ::= formalParam COMMA formalParams 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String fps = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= (fp +", "+fps); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("formalParams",3, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formalParams ::= formalParam 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= (fp); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("formalParams",3, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formalParam ::= type ID 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= (t +" "+i); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("formalParam",4, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formalParam ::= type 
            {
              String RESULT =null;

              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("formalParam",4, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // block ::= LBRA statements RBRA 
            {
              String RESULT =null;
		int stsleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).right;
		String sts = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).value;
		 RESULT= ("{\n"+ sts+"\n}"); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statements ::= statement 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= (s); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statements ::= statement statements 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String sts = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= (s + " " + sts); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= block 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= (b+"\n"); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= localVarDecl 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= (e+"\n"); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= assignStmt 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (e+"\n");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= returnStmt 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (e);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= printStmt 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (e+"\n");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= forLoop 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (e+"\n");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= ifStmt 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (e+"\n");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= whileLoop 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (e+"\n");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= expression SEMI 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).value;
		RESULT= (e+"\n");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= switchStmt 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (e+"\n");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= case 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (e+"\n");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= default 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (e+"\n");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // localVarDecl ::= type ID SEMI 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).value;
		 RESULT= (t + " " + i+ ";"); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",9, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // localVarDecl ::= type ID COMMA localVarDecl 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String lv = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= (t + " " + i+ ", " +lv); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",9, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // localVarDecl ::= type assignStmt 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (t + " " + a);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",9, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // localVarDecl ::= ID SEMI 
            {
              String RESULT =null;

              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",9, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // localVarDecl ::= ID COMMA localVarDecl 
            {
              String RESULT =null;

              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",9, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assignStmt ::= ID EQUAL expression SEMI 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).value;
		 RESULT= (i+" = "+e+";"); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("assignStmt",10, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assignStmt ::= ID EQUAL expression COMMA assignStmt 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= (i+" = "+e+", " +as); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("assignStmt",10, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // returnStmt ::= RETURN expression SEMI 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).value;
		RESULT= ("return "+e+";");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("returnStmt",11, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // returnStmt ::= RETURNBOI 
            {
              String RESULT =null;
		RESULT= ("");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("returnStmt",11, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // printStmt ::= PRINTF LPAR QUOTES COMMA expression RPAR SEMI 
            {
              String RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		 RESULT= ("System.out.printf("+q+","+m+");"); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("printStmt",16, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // printStmt ::= PRINTF LPAR QUOTES COMMA expression COMMA expression RPAR SEMI 
            {
              String RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-6)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-6)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		 RESULT= ("System.out.printf("+q+","+m+","+n+");"); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("printStmt",16, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-8)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // printStmt ::= PRINTF LPAR QUOTES RPAR SEMI 
            {
              String RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		 RESULT= ("System.out.printf("+q+");"); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("printStmt",16, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= multiplicativeExpr 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (me);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= multiplicativeExpr MULT expression 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (me+"*"+e);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= multiplicativeExpr PLUS expression 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (me+"+"+e);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= multiplicativeExpr MINUS expression 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (me+"-"+e);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= multiplicativeExpr LTHAN expression 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (me+"<"+e);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= multiplicativeExpr GTHAN expression 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (me+">"+e);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= ID PLUSPLUS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).value;
		RESULT=(i+"++");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // multiplicativeExpr ::= primaryExpr 
            {
              String RESULT =null;
		int pe1left = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int pe1right = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String pe1 = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (pe1);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpr",13, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // primaryExpr ::= ID LPAR actualParams RPAR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).value;
		RESULT=(i+"("+a+")");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",14, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // primaryExpr ::= LPAR expression RPAR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-1)).value;
		RESULT= ("("+e+")");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",14, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // primaryExpr ::= ID LPAR RPAR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		RESULT= (i+"()");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",14, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // primaryExpr ::= QUOTES 
            {
              String RESULT =null;

              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",14, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // primaryExpr ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= (n); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",14, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // primaryExpr ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		 RESULT= (i); 
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",14, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // primaryExpr ::= ID LPAR ID COMMA ID RPAR SEMI 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		RESULT= (i+"("+a+","+b+");");
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",14, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // actualParams ::= expression COMMA actualParams 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (e +", " +ap);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("actualParams",15, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.elementAt(CUP$A5_104232327_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // actualParams ::= expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A5_104232327_Parser$stack.peek()).value;
		RESULT= (e);
              CUP$A5_104232327_Parser$result = parser.getSymbolFactory().newSymbol("actualParams",15, ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A5_104232327_Parser$stack.peek()), RESULT);
            }
          return CUP$A5_104232327_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A5_104232327_Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A5_104232327_Parser$do_action(
    int                        CUP$A5_104232327_Parser$act_num,
    java_cup.runtime.lr_parser CUP$A5_104232327_Parser$parser,
    java.util.Stack            CUP$A5_104232327_Parser$stack,
    int                        CUP$A5_104232327_Parser$top)
    throws java.lang.Exception
    {
              return CUP$A5_104232327_Parser$do_action_part00000000(
                               CUP$A5_104232327_Parser$act_num,
                               CUP$A5_104232327_Parser$parser,
                               CUP$A5_104232327_Parser$stack,
                               CUP$A5_104232327_Parser$top);
    }
}

}
