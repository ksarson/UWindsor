Script started on Wed 10 Feb 2016 03:30:55 PM EST
]0;sarsonk@ltsp-i386-bravo: ~/cs141sarsonk@ltsp-i386-bravo:~/cs141$ cat assign2.c7[K
/*	
	Sarson, Kolby
	ID:  104232327
	Assignment #2
	Due Date:  February 10, 2016
	Purpose:  To reverse an arbitrary N of inputted Ns
	as well as perform cacolstartulations on those Ns and reverse these
	results again.
	"I acknowledge that this is my own work and did not receive any 
	unauthorized help with it."
*/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#define COL 20
#define ROW 20

/* Function Prototypes */
void PopulateArray2DUnique (int A[][COL], unsigned int rowsize, unsigned int colsize, int min, int max);
void DisplayArray2D (int A[][COL], unsigned int rowsize, unsigned int colsize);
int FindLargest (int A[][COL], unsigned int rowsize, unsigned int colsize);
int FindColSum  (int A[][COL], unsigned int rowsize, unsigned int col_to_sum);
void Sort2DArray (int A[][COL], unsigned int rowsize, unsigned int colsize);
void CopyArray2D (int A[][COL], int B[][COL], unsigned int rowsize, unsigned int colsize);
void CopyArray2DSpiral  (int A[][COL], int B[][COL], unsigned int rowsize, unsigned int colsize);

/* Main Function */
int main ()
{
	unsigned int rowsize, colsize, col_to_sum;
	int max, min, A[ROW][COL], B[ROW][COL];

	/* User Inputs */
	printf ("Please enter the row size followed by the column size (Row: 0-%d, Column: 0-%d):\n", ROW, COL);
	scanf ("%u %u", &rowsize, &colsize);
	printf ("Please enter the min and max values to include in the array:\n");
	scanf ("%d %d", &max, &min);
	printf ("Please enter a column number to find the sum of (starts at 0):\n");
	scanf ("%u", &col_to_sum);

	/* Function Calls and Outputs */
	PopulateArray2DUnique (A, rowsize, colsize, max, min);
	printf ("Display2DArray:\n");
	DisplayArray2D (A, rowsize, colsize);	
	printf ("FindLargest: %d\n", FindLargest(A, rowsize, colsize));
	printf ("FindColSum of column %u: %d\n", col_to_sum, FindColSum (A, rowsize, col_to_sum));
	printf ("Sort2DArray:\n");
	Sort2DArray (A, rowsize, colsize);
	printf ("CopyArray2D:\n");
	CopyArray2D (A, B, rowsize, colsize);
	printf ("CopyArray2DSpiral:\n");
	CopyArray2DSpiral (A, B, rowsize, colsize);

	return 0;
}

/* Populates the 2D Array of sizes rowsize x colsize with random integers
ranging between min and max inclusive. */
void PopulateArray2DUnique (int A[][COL], unsigned int rowsize, unsigned int colsize, int min, int max)
{
	int i, j;
	srand(time(NULL));  // Makes rand() random and differing between runs
	for (i = 0; i < (int)rowsize; i++)
	{
		for (j = 0; j < (int)colsize; j++)
			A[i][j] = min + (rand() % (max + 1 - min));	// Populate array with random numbers
	}
}

/* Display the contents of a 2D array of size rowsize x colsize in a
table format; that is each line will display one row where the numbers
are separated by a single space character. */
void DisplayArray2D (int A[][COL], unsigned int rowsize, unsigned int colsize)
{
	int i, j;
	for (i = 0; i < (int)rowsize; i++)
	{
		for (j = 0; j < (int)colsize; j++)
			printf("%d\t", A[i][j]);	// Outputs array
	printf ("\n");
	}
}

/* Given a 2D array A of size rowsize x colsize, return the largest
integer number it contains. */
int FindLargest (int A[][COL], unsigned int rowsize, unsigned int colsize)
{
	int i, j, largest = 0;
	for (i = 0; i < (int)rowsize; i++)
	{
		for (j = 0; j < (int)colsize; j++)
		{
				if (largest < A[i][j])  // Checks for largest value in array
				largest = A[i][j];
		}
	}
	return largest;
}

/* Calculate the sum of a given column col of a 2D array of size rowsize
x colsize. Return the sum of that column. */
int FindColSum  (int A[][COL], unsigned int rowsize, unsigned int col_to_sum)
{
	int i, sum = 0;
	for (i = 0; i < (int)rowsize; i++)
		sum += A[i][col_to_sum];	// Finds sum in given column
	return sum;
}

/* Sort a 2D array of size rowsize x colsize in ascending order. i.e.
A[0][0] would have the smallest value. Example of a 3x3 sort:
1 2 3
4 5 6
7 8 9 */
void Sort2DArray (int A[][COL], unsigned int rowsize, unsigned int colsize)
{
	int i, j, k = 0, hold, pass, C[rowsize*colsize];

	/* Converts 2D to 1D array */
	for (i = 0; i < (int)rowsize; i++)
		{
			for (j = 0; j < (int)colsize; j++)
			{
				C[k] = A[i][j];	// Places 2D array into 1D array
				k++;
			}
		}

	/* Sorts 1D array */
	k = 0;
	for (pass = 0; pass < (int)(rowsize*colsize); pass++)	// Repeats sort "array size" times
	{
		for (k = 0; k < (int)(rowsize*colsize-1); k++)
		{
			if (C[k] > C[k+1])  // If value is greater than next value
			{
					hold = C[k];	// Switches value with next value
					C[k] = C[k+1];
					C[k+1] = hold;
			}
		}
	}

	/* Converts sorted 1D to 2D array */
	k = 0;
	for (i = 0; i < (int)rowsize; i++)
		{
			for (j = 0; j < (int)colsize; j++)
			{
				A[i][j] = C[k];	// Places 1D array back into 2D array
				k++;
			}
		}

	/* Outputs sorted array */
	for (i = 0; i < (int)rowsize; i++)
	{
		for (j = 0; j < (int)colsize; j++)
			printf("%d\t", A[i][j]);	// Outputs array
	printf ("\n");
	}
}

/* Copy the contents of array A into array B of the same size such that
the contents of B would be exactly the contents of A. e.g. copying A
into B:
A:        B:
1 2 3     1 2 3
4 5 6 --> 4 5 6
7 8 9     7 8 9 */
void CopyArray2D (int A[][COL], int B[][COL], unsigned int rowsize, unsigned int colsize)
{
	int i, j;
	for (i = 0; i < (int)rowsize; i++)
	{
		for (j = 0; j < (int)colsize; j++)
			B[i][j] = A[i][j];	// Copies array A into B
	}

	for (i = 0; i < (int)rowsize; i++)
	{
		for (j = 0; j < (int)colsize; j++)
			printf("%d\t", B[i][j]);	// Outputs array
	printf ("\n");
	}
}

/* Copy the contents of array A into array B of the same size such that
the contents of B would be exactly the contents of A except they will
be in a clockwise spiral sorted order. e.g. copying A into B with
Spiral effects:
A:        B:
1 2 3     1 2 3
4 5 6 --> 8 9 4
7 8 9     7 6 5 */
void CopyArray2DSpiral (int A[][COL], int B[][COL], unsigned int rowsize, unsigned int colsize)
{
	int rowstart, colstart, newrow, i, j, k;
	rowstart = 0; colstart = 0; newrow = 0;
	int holdrow = (int)rowsize, holdcol = (int)colsize;	// Holds rowsize and colsize
	newrow = rowstart, k = colstart; // Used to determine where A values are taken from 

	while ((rowstart < (int)rowsize) && (colstart < (int)colsize))	// While rectangle has positive side lengths
	{
		/* Places values in top row left to right */
		for (i = rowstart; i < rowstart + 1; i++)
		{
			for (j = colstart; j < (int)colsize; j++)
			{	
				if (k >= holdcol)	// Determine if next row of values is needed from A
					{
						newrow++;
						k = 0;
					}
				B[i][j] = A[newrow][k];	// Places A's ascending order values into B's spiral format
				k++;
			}
		}

		/* Places values in rightmost column top to bottom */
		for (j = (int)colsize - 1; j > (int)colsize - 2; j--)
		{
			for (i = rowstart + 1; i < (int)rowsize; i++)
			{
				if (k >= holdcol)	// Determine if next row of values is needed from A
					{
						newrow++;
						k = 0;
					}
				B[i][j] = A[newrow][k];	// Places A's ascending order values into B's spiral format
				k ++;
			}
		}

		/* Places values in bottom row right to left */
		if (((int)rowsize - rowstart) > 1)	// If statement to cancel loop if only one row left to fill
		{									// which would be filled by first nested for loop
			for (i = (int)rowsize - 1; i > (int)rowsize - 2; i--)
			{
				for (j = (int)colsize - 2; j > colstart - 1; j--)
				{
					if (k >= holdcol)	// Determine if next row of values is needed from A
						{
							newrow++;
							k = 0;
						}
					B[i][j] = A[newrow][k];	// Places A's ascending order values into B's spiral format
					k++;
				}
			}
		}

		/* Places values in leftmost column bottom to top */
		if (((int)colsize - colstart) > 1)	// If statement to cancel loop if only one column left to fill
		{									// which would be filled by second nested for loop
			for (j = colstart; j < colstart + 1; j++)
			{
				for (i = (int)rowsize - 2; i > rowstart; i--)
				{	
					if (k >= (int)holdcol)	// Determine if next row of values is needed from A
						{
							newrow++;
							k = 0;
						}
					B[i][j] = A[newrow][k];	// Places A's ascending order values into B's spiral format
					k++;
				}
			}
		}
		rowstart++; colstart++; rowsize--; colsize--;	// Removes outermost rows and columns from next round of sorting
	}

	rowsize = holdrow; colsize = holdcol;	// Reassigns rowsize and colsize

	/* Outputs spiral array */
	for (i = 0; i < (int)rowsize; i++)
	{
		for (j = 0; j < (int)colsize; j++)
			printf("%d\t", B[i][j]);
	printf ("\n");
	}
}
]0;sarsonk@ltsp-i386-bravo: ~/cs141sarsonk@ltsp-i386-bravo:~/cs141$ gcc assign2.c
]0;sarsonk@ltsp-i386-bravo: ~/cs141sarsonk@ltsp-i386-bravo:~/cs141$ gcc assign2.ccat[C[C[C[C[C[C[C[C[C[C[6P./a.out
Please enter the row size followed by the column size (Row: 0-20, Column: 0-20):
59  9
Please enter the min and max values to include in the array:
1 99
Please enter a column number to find the sum of (starts at 0):
1
Display2DArray:
35	37	70	8	14	77	29	22	89	
68	53	54	84	77	76	45	11	64	
93	45	37	85	40	51	62	41	71	
68	54	18	83	86	54	52	92	68	
27	21	87	17	86	40	68	69	15	
FindLargest: 93
FindColSum of column 1: 210
Sort2DArray:
8	11	14	15	17	18	21	22	27	
29	35	37	37	40	40	41	45	45	
51	52	53	54	54	54	62	64	68	
68	68	68	69	70	71	76	77	77	
83	84	85	86	86	87	89	92	93	
CopyArray2D:
8	11	14	15	17	18	21	22	27	
29	35	37	37	40	40	41	45	45	
51	52	53	54	54	54	62	64	68	
68	68	68	69	70	71	76	77	77	
83	84	85	86	86	87	89	92	93	
CopyArray2DSpiral:
8	11	14	15	17	18	21	22	27	
54	62	64	68	68	68	68	69	29	
54	86	86	87	89	92	93	70	35	
54	85	84	83	77	77	76	71	37	
53	52	51	45	45	41	40	40	37	
]0;sarsonk@ltsp-i386-bravo: ~/cs141sarsonk@ltsp-i386-bravo:~/cs141$ ./a.out
Please enter the row size followed by the column size (Row: 0-20, Column: 0-20):
20 3
Please enter the min and max values to include in the array:
100 10  321
Please enter a column number to find the sum of (starts at 0):
0
Display2DArray:
260	221	283	
235	247	270	
232	138	104	
127	115	235	
185	124	291	
161	170	140	
298	257	125	
171	270	284	
306	260	259	
295	290	221	
181	280	172	
194	193	320	
194	104	136	
199	183	203	
164	268	227	
133	160	128	
173	136	115	
198	207	286	
212	243	276	
150	216	245	
FindLargest: 320
FindColSum of column 0: 4068
Sort2DArray:
104	104	115	
115	124	125	
127	128	133	
136	136	138	
140	150	160	
161	164	170	
171	172	173	
181	183	185	
193	194	194	
198	199	203	
207	212	216	
221	221	227	
232	235	235	
243	245	247	
257	259	260	
260	268	270	
270	276	280	
283	284	286	
290	291	295	
298	306	320	
CopyArray2D:
104	104	115	
115	124	125	
127	128	133	
136	136	138	
140	150	160	
161	164	170	
171	172	173	
181	183	185	
193	194	194	
198	199	203	
207	212	216	
221	221	227	
232	235	235	
243	245	247	
257	259	260	
260	268	270	
270	276	280	
283	284	286	
290	291	295	
298	306	320	
CopyArray2DSpiral:
104	104	115	
247	257	115	
245	259	124	
243	260	125	
235	260	127	
235	268	128	
232	270	133	
227	270	136	
221	276	136	
221	280	138	
216	283	140	
212	284	150	
207	286	160	
203	290	161	
199	291	164	
198	295	170	
194	298	171	
194	306	172	
193	320	173	
185	183	181	
]0;sarsonk@ltsp-i386-bravo: ~/cs141sarsonk@ltsp-i386-bravo:~/cs141$ ./a.out
Please enter the row size followed by the column size (Row: 0-20, Column: 0-20):
15 6
Please enter the min and max values to include in the array:
25 75
Please enter a column number to find the sum of (starts at 0):
4
Display2DArray:
28	43	37	44	39	39	
27	49	62	55	62	35	
60	54	32	50	40	45	
38	49	26	46	57	39	
30	43	61	36	41	32	
69	44	25	56	37	39	
70	64	63	56	43	74	
67	52	53	48	26	42	
42	65	66	43	35	47	
32	40	65	68	26	55	
50	44	49	50	75	61	
38	69	50	51	50	42	
49	66	70	51	63	71	
69	54	60	33	46	45	
30	53	60	44	71	35	
FindLargest: 75
FindColSum of column 4: 711
Sort2DArray:
25	26	26	26	27	28	
30	30	32	32	32	33	
35	35	35	36	37	37	
38	38	39	39	39	39	
40	40	41	42	42	42	
43	43	43	43	44	44	
44	44	45	45	46	46	
47	48	49	49	49	49	
50	50	50	50	50	51	
51	52	53	53	54	54	
55	55	56	56	57	60	
60	60	61	61	62	62	
63	63	64	65	65	66	
66	67	68	69	69	69	
70	70	71	71	74	75	
CopyArray2D:
25	26	26	26	27	28	
30	30	32	32	32	33	
35	35	35	36	37	37	
38	38	39	39	39	39	
40	40	41	42	42	42	
43	43	43	43	44	44	
44	44	45	45	46	46	
47	48	49	49	49	49	
50	50	50	50	50	51	
51	52	53	53	54	54	
55	55	56	56	57	60	
60	60	61	61	62	62	
63	63	64	65	65	66	
66	67	68	69	69	69	
70	70	71	71	74	75	
CopyArray2DSpiral:
25	26	26	26	27	28	
44	45	45	46	46	30	
44	60	61	61	47	30	
44	60	75	62	48	32	
44	60	74	62	49	32	
43	57	71	63	49	32	
43	56	71	63	49	33	
43	56	70	64	49	35	
43	55	70	65	50	35	
42	55	69	65	50	35	
42	54	69	66	50	36	
42	54	69	66	50	37	
41	53	68	67	50	37	
40	53	52	51	51	38	
40	39	39	39	39	38	
]0;sarsonk@ltsp-i386-bravo: ~/cs141sarsonk@ltsp-i386-bravo:~/cs141$ exit
exit

Script done on Wed 10 Feb 2016 03:33:24 PM EST
